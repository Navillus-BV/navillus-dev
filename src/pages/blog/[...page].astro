---
import Layout from '../../layouts/base.astro'
import PostPreview from '../../components/PostPreview.astro'
import Section from '../../components/Section.astro'
import site from '../../data/site.json'
import { readMinutes } from '../../utils/readMinutes'

export async function getStaticPaths({ paginate, rss }) {
  function isPublished(post) {
    return !post.draft
  }

  function includeReadingTime(post) {
    return {
      ...post,
      minutes: readMinutes(post),
    }
  }

  function sortPosts(a, b) {
    return (
      new Date(b.published_date).getTime() -
      new Date(a.published_date).getTime()
    )
  }

  const allPosts = Astro.fetchContent('../blog/*.md')
    .filter(isPublished)
    .map(includeReadingTime)
    .sort(sortPosts)

  rss({
    title: 'Blog | Navillus',
    description: site.description,
    customData: `<language>en-us</language>`,
    items: allPosts.map((item) => {
      const content = `<content><![CDATA[ ${item.content.html} ]]></content>`
      const customData = [
        `<id>${item.url}</id>`,
        item.modified_date && `<updated>${item.modified_date}</updated>`,
        content,
      ]
        .filter(Boolean) // remove <updated> if it wasn't used
        .join('') // combine into one string

      return {
        title: item.title,
        description: item.description,
        link: item.url,
        pubDate: item.published_date,
        customData,
      }
    }),
    dest: '/feed/blog.xml',
  })

  return paginate(allPosts, { pageSize: 25 })
}

const { page } = Astro.props
const { data: posts } = page
---

<Layout
  title="Blog"
  pathname={Astro.request.url.pathname}
  canonicalURL={page.url.current}
>
  <section>
    <div class="container hero">
      <h1 class="h6"><strong>JAMSTACK DEVELOPERS FOR HIRE</strong></h1>
      <h2 class="h1">The Navillus Blog</h2>
      <p>Exploring the Jamstack and the future of web development.</p>
    </div>
  </section>

  <Section alt title="All Posts">
    {posts.map((post) => <PostPreview post={post} />)}
  </Section>
</Layout>
