---
import XElement from 'astro-xelement'
import Logo from './Logo.astro'
import ThemeToggle from './ThemeToggle.astro'
import navigation from '../data/navigation.json'
import { normalizeNavigationLink } from '../utils/cms.ts'

interface Props {
  pathname: string
}

const { pathname } = Astro.props as Props

const normalizeLink = normalizeNavigationLink(
  Astro.fetchContent('../data/pages/**/*.md')
)

const pages = (navigation as CMS.Navigation).pages.map(normalizeLink)

interface MenuInputElement extends HTMLInputElement {}

const initMenuInput = (element: MenuInputElement) => {
  const hamburgerElem = document.querySelector('[for="toggle"]')
  element.onchange = () => {
    element.checked
      ? hamburgerElem.classList.add('is-active')
      : hamburgerElem.classList.remove('is-active')
  }

  matchMedia('(min-width: 768px)').onchange = (event) => {
    if (event.matches) {
      hamburgerElem.classList.remove('is-active')
      element.checked = false
    }
  }

  element.classList.add('animate')
}
---

<header>
  <div class="container top">
    <a href="/" class="brand">
      <span class="sr-only">Go to homepage</span>
      <Logo />
    </a>

    <nav>
      <ul>
        {pages.map(({ title, page }) => (
          <li>
            <a
              class="hover:outline"
              href={page}
              aria-current={pathname === page}
            >
              {title}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <ThemeToggle />

    <a href="/#contact" class="button button--outline">Get in Touch</a>

    <XElement
      @is="label"
      for="toggle"
      title="Open Menu"
      class="hamburger hamburger--squeeze header__hamburger"
    >
      <span class="hamburger-box">
        <span class="hamburger-inner"></span>
      </span>
    </XElement>
  </div>

  <XElement
    @is="input"
    type="checkbox"
    id="toggle"
    class="sr-only"
    title="Open Menu"
    @do={initMenuInput}
  />

  <nav class="container">
    <ul>
      {pages.map(({ title, page }) => (
        <li>
          <a href={page} class="h5" aria-current={pathname === page}>
            {title}
          </a>
        </li>
      ))}
      <li>
        <a
          href="/#contact"
          aria-current={pathname === '/#contact'}
          class="button"
        >
          Get in Touch
        </a>
      </li>
    </ul>
  </nav>
</header>

<style lang="scss">
  header {
    position: sticky;
    top: 0;
    z-index: 90;
    background: var(--chisel-primary);
  }

  a:not(.button) {
    color: inherit;
    text-decoration: none;
  }

  a[aria-current] {
    text-decoration: underline;
  }

  #toggle ~ nav {
    display: none;
  }

  #toggle:checked ~ nav {
    display: block;
  }

  #toggle.animate ~ nav {
    display: block;
    max-height: 0;
    overflow: hidden;
    transition: max-height 300ms cubic-bezier(0.33, 1, 0.68, 1);
    visibility: hidden;
  }

  #toggle.animate:checked ~ nav {
    max-height: 16rem;
    visibility: visible;
  }

  .top {
    padding-top: var(--spacer-xs);
    padding-bottom: var(--spacer-xs);
    display: flex;
    align-items: center;

    & nav,
    & a.button {
      display: none;
    }
  }

  .brand {
    height: 40px;
    flex: 1 0 0%;
    padding: 4px 0;
  }

  .hamburger,
  a.button--outline {
    margin-left: 1em;
  }

  ul {
    display: flex;
    flex-direction: column;
    align-items: center;

    & li:last-of-type {
      margin-top: var(--spacer-sm);
    }
  }

  nav {
    & a.button {
      margin-bottom: var(--spacer-md);
    }

    & a:not(.button) {
      line-height: 2;
    }

    & li {
      padding: 0 var(--spacer-sm);
    }
  }

  @media (min-width: 768px) {
    .brand {
      flex: initial;
    }

    .top nav,
    .top a.button {
      display: inline-flex;
    }

    .top nav {
      flex: 1 0 0%;
      justify-content: center;
    }

    label[for='toggle'] {
      display: none;
    }

    ul {
      flex-direction: row;

      & li:last-of-type {
        margin-top: 0;
      }
    }

    #toggle.animate + nav {
      transition: none;
    }
  }

  @media (min-width: 1024px) {
    ul {
      gap: var(--spacer-xs);
    }
  }
</style>
